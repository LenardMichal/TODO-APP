{"version":3,"sources":["components/LoggedView/LoggedView.module.css","components/LoginForm/LoginForm.module.css","components/InputTodo/InputTodo.module.css","containers/App/App.module.css","components/InputTodo/InputTodo.js","components/LoggedView/LoggedView.js","components/LoginForm/LoginForm.js","utils/loginRequest.js","utils/updateRequest.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","LoggedView","doneStyle","box","LoginForm","disclaimer","InputTodo","App","props","_useState","useState","_useState2","Object","slicedToArray","commentState","setCommentState","_useState3","_useState4","userState","setUserState","useEffect","localStorage","getItem","react_default","a","createElement","className","classes","type","value","onChange","e","target","maxLength","placeholder","onClick","setItem","addTask","user","content","cleanupList","list","todoList","todo","map","el","done","key","_id","title","date","taskDone","react","login","sessionStorage","removeItem","window","location","reload","components_InputTodo_InputTodo","loginState","setLoginState","pwdState","setPwdState","pwdField","useRef","onKeyDown","current","focus","ref","pwd","console","log","_x","_login","apply","this","arguments","_callee","credential","rawRespond","respond","regenerator_default","wrap","_context","prev","next","fetch","method","body","JSON","stringify","headers","Content-Type","mode","sent","json","abrupt","stop","update","_update","data","credentialState","setCredentialState","dataState","setDataState","view","_updateViewHandler","asyncToGenerator","mark","loginRequest","t0","updateData","updateViewHandler","_addTaskHandler","_callee2","task","state","newTask","updatedState","_context2","assign","unshift","updateRequest","_cleanupListHandler","_callee3","notDoneTasks","_context3","filter","element","components_LoginForm_LoginForm","components_LoggedView_LoggedView","id","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a73105b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoggedView\":\"LoggedView_LoggedView__1uHqj\",\"doneStyle\":\"LoggedView_doneStyle__3x5Ic\",\"box\":\"LoggedView_box__3fRN5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginForm\":\"LoginForm_LoginForm__121sQ\",\"disclaimer\":\"LoginForm_disclaimer__3oyoR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputTodo\":\"InputTodo_InputTodo__5FPDE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1NldQ\"};","import React, { useState, useEffect } from 'react';\nimport classes from './InputTodo.module.css';\n\nconst InputTodo = props => {\n  const [commentState, setCommentState] = useState('');\n  const [userState, setUserState] = useState('');\n\n  useEffect(() => {\n    if (localStorage.getItem('user')) {\n      setUserState(localStorage.getItem('user'));\n    }\n  }, []);\n\n  return (\n    <div className={classes.InputTodo}>\n      <input\n        type='text'\n        value={commentState}\n        onChange={e => setCommentState(e.target.value)}\n        maxLength='300'\n        placeholder='Add TODO'\n      />\n      <input\n        type='text'\n        value={userState}\n        onChange={e => setUserState(e.target.value)}\n        maxLength='30'\n        placeholder='By'\n      />\n      <button\n        onClick={e => {\n          localStorage.setItem('user', userState);\n          props.addTask({ user: userState, content: commentState });\n        }}\n      >\n        Add\n      </button>\n      <button onClick={props.cleanupList}>CleanUp</button>\n    </div>\n  );\n};\n\nexport default InputTodo;\n","import React, { Fragment } from 'react';\nimport classes from './LoggedView.module.css';\nimport InputTodo from '../InputTodo/InputTodo';\nconst LoggedView = props => {\n  //Render list of todo elements\n  let list = props.todoList.todo.map(el => {\n    //Add style for elements that are done\n    let doneStyle = '';\n    if (el.done === true) {\n      doneStyle = classes.doneStyle;\n    }\n    return (\n      <li key={el._id} className={doneStyle}>\n        <span>{el.content}</span>\n        <span title={el.date}>{el.user}</span>\n        <button value={el._id} onClick={e => props.taskDone(e.target.value)}>\n          DONE\n        </button>\n      </li>\n    );\n  });\n\n  //Handler for logout!\n  function logoutHandler() {\n    sessionStorage.removeItem('pwd');\n    window.location.reload();\n  }\n\n  return (\n    <Fragment>\n      <div className={classes.box}>\n        <h2>DB name: {props.todoList.login}</h2>\n        <button onClick={logoutHandler}>Logout!</button>\n      </div>\n      <InputTodo addTask={props.addTask} cleanupList={props.cleanupList} />\n      <ul className={classes.LoggedView}>{list}</ul>\n    </Fragment>\n  );\n};\n\nexport default LoggedView;\n","import React, { useState, useRef, useEffect, Fragment } from 'react';\n\nimport classes from './LoginForm.module.css';\n\nconst LoginForm = props => {\n  const [loginState, setLoginState] = useState('');\n  const [pwdState, setPwdState] = useState('');\n\n  const pwdField = useRef(null);\n\n  //Effect for last db name in input\n  useEffect(() => {\n    if (localStorage.getItem('login')) {\n      setLoginState(localStorage.getItem('login'));\n    }\n  }, []);\n\n  return (\n    <Fragment>\n      <section className={classes.LoginForm}>\n        <input\n          type='text'\n          maxLength='30'\n          value={loginState}\n          placeholder='DB name'\n          onChange={e => setLoginState(e.target.value)}\n          onKeyDown={e => {\n            if (e.key === 'Enter') {\n              pwdField.current.focus();\n            }\n          }}\n        />\n        <input\n          type='password'\n          maxLength='30'\n          value={pwdState}\n          ref={pwdField}\n          placeholder='Password'\n          onChange={e => setPwdState(e.target.value)}\n          onKeyDown={e => {\n            if (e.key === 'Enter') {\n              props.login({ login: loginState, pwd: pwdState });\n            }\n          }}\n        />\n\n        <button\n          onClick={e => {\n            console.log();\n            props.login({ login: loginState, pwd: pwdState });\n          }}\n        >\n          Get In!\n        </button>\n      </section>\n      <section className={classes.disclaimer}>\n        <h1>Disclaimer!</h1>\n        <p>\n          TODO app only for fun purposes. I'm not responsible for any content\n          added by 3rd party users. Todo list is created for each\n          DBName-password pair, and password isn't encrypted in database. Use\n          with caution.\n        </p>\n      </section>\n    </Fragment>\n  );\n};\n\nexport default LoginForm;\n","export default async function login(credential) {\n  let rawRespond = await fetch('https://lenek93.usermd.net/api/login', {\n    method: 'POST',\n    body: JSON.stringify(credential),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    mode: 'cors',\n  });\n  let respond = await rawRespond.json();\n  return respond;\n}\n","export default async function update(data) {\n  let rawRespond = await fetch('https://lenek93.usermd.net/api/update', {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    mode: 'cors',\n  });\n  let respond = await rawRespond.json();\n  return respond;\n}\n","import React, { useState, useEffect } from 'react';\nimport LoggedView from '../../components/LoggedView/LoggedView';\nimport LoginForm from '../../components/LoginForm/LoginForm';\nimport loginRequest from '../../utils/loginRequest';\nimport updateRequest from '../../utils/updateRequest';\nimport classes from './App.module.css';\n\nfunction App() {\n  //credentialState is for login password pair\n  //dataState is for TODO data\n  const [credentialState, setCredentialState] = useState(null);\n  const [dataState, setDataState] = useState(null);\n\n  let view = <div>View</div>;\n\n  //Save to sessionStorage\n  useEffect(() => {\n    if (credentialState) {\n      localStorage.setItem('login', credentialState.login);\n      sessionStorage.setItem('pwd', credentialState.pwd);\n    }\n  }, [credentialState]);\n\n  //Log in based on sessionStorage\n  useEffect(() => {\n    if (\n      credentialState === null &&\n      localStorage.getItem('login') &&\n      sessionStorage.getItem('pwd')\n    ) {\n      const login = localStorage.getItem('login');\n      const pwd = sessionStorage.getItem('pwd');\n      // console.log(credentialState);\n      setCredentialState({ login, pwd });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  //Function that updates render view with fetched data\n  async function updateViewHandler() {\n    try {\n      let data = await loginRequest(credentialState);\n\n      setDataState(data);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Function for updates\n  function updateData() {\n    // console.log(credentialState, dataState);\n    if (credentialState || dataState) {\n      // console.log('inside condition block');\n      updateViewHandler();\n    }\n  }\n  //Fetch from server\n  useEffect(() => {\n    updateData();\n    // eslint-disable-next-line\n  }, [credentialState]);\n\n  //useEffect for fetching each 5secs.\n  // useEffect(() => {\n  //   setInterval(updateData, 1000);\n  // }, []);\n\n  //Makes done true for selected element\n  function taskDoneHandler(id) {\n    const state = Object.assign({}, dataState);\n    let currentTODO = state.todo.filter(value => value._id === id)[0];\n    currentTODO.done = true;\n    setDataState(state);\n    updateRequest(dataState);\n  }\n\n  //Adds new task to list\n  async function addTaskHandler(task) {\n    try {\n      const state = Object.assign({}, dataState);\n      const newTask = {\n        content: task.content,\n        user: task.user,\n      };\n      state.todo.unshift(newTask);\n      let updatedState = await updateRequest(state);\n      setDataState(updatedState);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Function that cleanup list\n  async function cleanupListHandler() {\n    let state = Object.assign({}, dataState);\n    let notDoneTasks = state.todo.filter(element => element.done === false);\n    state.todo = notDoneTasks;\n    setDataState(state);\n    updateRequest(state);\n  }\n\n  //Login handler for any future purposes\n  function loginHandler(credential) {\n    setCredentialState(credential);\n  }\n\n  //Rerender based on dataState\n  if (dataState === null) {\n    view = <LoginForm login={loginHandler} />;\n  } else {\n    view = (\n      <LoggedView\n        todoList={dataState}\n        taskDone={taskDoneHandler}\n        addTask={addTaskHandler}\n        cleanupList={cleanupListHandler}\n      />\n    );\n  }\n\n  return (\n    <div className={classes.App}>\n      <h1>TODO App</h1>\n\n      {view}\n    </div>\n  );\n}\n\nexport default App;\n\n/*\n  Things that this component will do:\n  1. Checks that login,password exists and fetch for them\n  2. Render view based on dataState \n\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}